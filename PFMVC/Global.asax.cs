using System;
using System.Net;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using DLL;
using System.Threading;
using System.Configuration;

namespace PFMVC
{
    public class MvcApplication : System.Web.HttpApplication
    {
        public static void RegisterGlobalFilters(GlobalFilterCollection filters)
        {
            filters.Add(new HandleErrorAttribute());
        }

        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                "Default", // Route name
                "{controller}/{action}/{id}", // URL with parameters
                new { controller = "Account", action = "Login", id = UrlParameter.Optional } // Parameter defaults
            );
        }

        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            RegisterGlobalFilters(GlobalFilters.Filters);
            RegisterRoutes(RouteTable.Routes);
            System.Globalization.CultureInfo cultureInfo = new System.Globalization.CultureInfo("en-IN");
            System.Globalization.NumberFormatInfo numberInfor = new System.Globalization.NumberFormatInfo();
            Thread.CurrentThread.CurrentCulture = cultureInfo;
            Thread.CurrentThread.CurrentUICulture = cultureInfo;
        }


        public ActionResult TestConnection()
        {
            RedirectResult x = new RedirectResult("www.google.com");
            return x;
        }

        void Session_Start(object sender, EventArgs e)
        {
            Session.Timeout = 259200;
        }


        /// <summary>
        /// Gets the number.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>decimal</returns>
        /// <CretaedBy>Avishek</CretaedBy>
        /// <CreatedDate>Sep-19-2015</CreatedDate>
        public decimal GetNumber(decimal value)
        {
            string b = ConfigurationManager.AppSettings["NumberFormat"].ToString();

            switch (b)
            {
                case "0":
                    value = Math.Round(value);
                    break;
                case "1":
                    value = Convert.ToDecimal(string.Format("{0:0.0}", value));
                    break;
                case "2":
                    value = Convert.ToDecimal(string.Format("{0:0.00}", value));
                    break;
                case "3":
                    value = Convert.ToDecimal(string.Format("{0:0.000}", value));
                    break;
                case "4":
                    value = Convert.ToDecimal(string.Format("{0:0.0000}", value));
                    break;
                default:
                     value = Convert.ToDecimal(string.Format("{0:0.00}", value));
                    break;
            }

            return value;
        }


        protected void Application_Error(object sender, EventArgs e)
        {
            if (Server != null)
            {

                Exception ex = Server.GetLastError();
                using (PFTMEntities context = new PFTMEntities())
                {
                    tbl_ErrorLog error_log = new tbl_ErrorLog();
                    //try
                    //{
                    //    error_log.ID = context.tbl_ErrorLog.Max(m => m.ID)+1; // now error log autogenerated
                    //}
                    //catch
                    //{
                    //    error_log.ID = 1;
                    //}
                    error_log.Message = ex.Message;
                    error_log.InnerException = ex.InnerException + "";
                    error_log.UserName = User.Identity.Name;
                    error_log.Time = DateTime.Now;
                    error_log.Type = "Server Error";
                    try
                    {
                        error_log.Terminal = Request.ServerVariables["REMOTE_ADDR"];
                    }
                    catch
                    {
                        error_log.Terminal = HttpContext.Current.Request.UserHostAddress;
                    }
                    error_log.HostName = Dns.GetHostName();
                    try
                    {
                        context.tbl_ErrorLog.Add(error_log);
                        context.SaveChanges();
                        Response.Redirect("/Error/Index/?excep=" + ex.Message + "&innerExcep=" + ex.InnerException, true);
                    }
                    catch
                    {
                        try
                        {
                            Response.Redirect("/Error/Index/?excep=" + ex.Message + "&innerExcep=" + ex.InnerException, true);
                        }
                        catch
                        {

                            Response.Redirect("/Error/Index/?excep=Failed to catch exception!&innerExcep=Failed to catch exception!", true);
                        }
                    }
                }

            }
        }



    }
}